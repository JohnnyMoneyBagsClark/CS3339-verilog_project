$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 4 ) a [3:0] $end
  $var wire 4 * b [3:0] $end
  $var wire 4 + op_code [3:0] $end
  $var wire 1 , carry_in $end
  $var wire 4 - result [3:0] $end
  $var wire 1 . carry_out $end
  $scope module alu $end
   $var wire 4 ) a [3:0] $end
   $var wire 4 * b [3:0] $end
   $var wire 4 + op_code [3:0] $end
   $var wire 1 , carry_in $end
   $var wire 4 - result [3:0] $end
   $var wire 1 . carry_out $end
   $var wire 4 / add_out [3:0] $end
   $var wire 4 0 sub_out [3:0] $end
   $var wire 4 1 div_out [3:0] $end
   $var wire 4 2 div_rem [3:0] $end
   $var wire 4 # and_out [3:0] $end
   $var wire 4 $ or_out [3:0] $end
   $var wire 4 % xor_out [3:0] $end
   $var wire 4 & nand_out [3:0] $end
   $var wire 4 ' nor_out [3:0] $end
   $var wire 4 ( xnor_out [3:0] $end
   $var wire 8 3 mul_out [7:0] $end
   $var wire 4 4 unused_mul_bits [3:0] $end
   $var wire 1 5 add_carry $end
   $var wire 1 6 sub_carry $end
   $scope module add $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 1 , carry_in $end
    $var wire 4 / sum [3:0] $end
    $var wire 1 5 carry_out $end
   $upscope $end
   $scope module and_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 # y [3:0] $end
   $upscope $end
   $scope module div $end
    $var wire 4 ) numerator [3:0] $end
    $var wire 4 * denominator [3:0] $end
    $var wire 4 1 quotient [3:0] $end
    $var wire 4 2 remainder [3:0] $end
   $upscope $end
   $scope module mul $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 8 3 product [7:0] $end
   $upscope $end
   $scope module nand_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 & y [3:0] $end
   $upscope $end
   $scope module nor_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 ' y [3:0] $end
   $upscope $end
   $scope module or_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 $ y [3:0] $end
   $upscope $end
   $scope module sub $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 1 , carry_in $end
    $var wire 4 0 difference [3:0] $end
    $var wire 1 6 carry_out $end
   $upscope $end
   $scope module xnor_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 ( y [3:0] $end
   $upscope $end
   $scope module xor_gate_instance $end
    $var wire 4 ) a [3:0] $end
    $var wire 4 * b [3:0] $end
    $var wire 4 % y [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0001 #
b0111 $
b0110 %
b1110 &
b1000 '
b1001 (
b0101 )
b0011 *
b0000 +
0,
b1000 -
0.
b1000 /
b0010 0
b0001 1
b0010 2
b00001111 3
b0000 4
05
06
#10
b0001 +
b0010 -
#20
b0010 +
b1111 -
#30
b0011 +
b0001 -
#40
b0100 +
#50
b0101 +
b0111 -
#60
b0110 +
b0110 -
#70
b0111 +
b1110 -
#80
b1000 +
b1000 -
#90
b1001 +
b1001 -
#100
b1010 +
b0010 -
#110
b1011 +
b0000 -
#120
b1100 +
#130
b1101 +
#140
b1110 +
#150
b1111 +
